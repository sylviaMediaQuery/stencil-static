/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "./stencil-public-runtime";
import { TransactionInterface } from "./components/cart/interface";
export namespace Components {
    interface LoadingSpinner {
    }
    interface NotificationMessage {
        "message": string;
        "type": 'success' | 'error' | 'info';
    }
    interface PaycargoBatchCart {
        "developerToken": string;
        "idToken": string;
        "pcTransactions": TransactionInterface[] | string;
        "pcTransationIds": number[] | string;
        "visible": boolean;
    }
    interface PaycargoCart {
        "developerToken": string;
        "handleClose": Function;
        /**
          * Options
         */
        "options": string;
        /**
          * PcData
         */
        "pcData": TransactionInterface | string;
        "visible": boolean;
    }
    interface PaycargoLogin {
        "brand": string;
        "options": string;
        "redirectBackUrl": string;
        "type": string;
    }
}
export interface PaycargoBatchCartCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPaycargoBatchCartElement;
}
export interface PaycargoCartCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPaycargoCartElement;
}
export interface PaycargoLoginCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPaycargoLoginElement;
}
declare global {
    interface HTMLLoadingSpinnerElement extends Components.LoadingSpinner, HTMLStencilElement {
    }
    var HTMLLoadingSpinnerElement: {
        prototype: HTMLLoadingSpinnerElement;
        new (): HTMLLoadingSpinnerElement;
    };
    interface HTMLNotificationMessageElement extends Components.NotificationMessage, HTMLStencilElement {
    }
    var HTMLNotificationMessageElement: {
        prototype: HTMLNotificationMessageElement;
        new (): HTMLNotificationMessageElement;
    };
    interface HTMLPaycargoBatchCartElement extends Components.PaycargoBatchCart, HTMLStencilElement {
    }
    var HTMLPaycargoBatchCartElement: {
        prototype: HTMLPaycargoBatchCartElement;
        new (): HTMLPaycargoBatchCartElement;
    };
    interface HTMLPaycargoCartElement extends Components.PaycargoCart, HTMLStencilElement {
    }
    var HTMLPaycargoCartElement: {
        prototype: HTMLPaycargoCartElement;
        new (): HTMLPaycargoCartElement;
    };
    interface HTMLPaycargoLoginElement extends Components.PaycargoLogin, HTMLStencilElement {
    }
    var HTMLPaycargoLoginElement: {
        prototype: HTMLPaycargoLoginElement;
        new (): HTMLPaycargoLoginElement;
    };
    interface HTMLElementTagNameMap {
        "loading-spinner": HTMLLoadingSpinnerElement;
        "notification-message": HTMLNotificationMessageElement;
        "paycargo-batch-cart": HTMLPaycargoBatchCartElement;
        "paycargo-cart": HTMLPaycargoCartElement;
        "paycargo-login": HTMLPaycargoLoginElement;
    }
}
declare namespace LocalJSX {
    interface LoadingSpinner {
    }
    interface NotificationMessage {
        "message"?: string;
        "type"?: 'success' | 'error' | 'info';
    }
    interface PaycargoBatchCart {
        "developerToken"?: string;
        "idToken"?: string;
        "onCancel"?: (event: PaycargoBatchCartCustomEvent<any>) => void;
        "pcTransactions"?: TransactionInterface[] | string;
        "pcTransationIds"?: number[] | string;
        "visible"?: boolean;
    }
    interface PaycargoCart {
        "developerToken"?: string;
        "handleClose"?: Function;
        "onPaycargoCartClose"?: (event: PaycargoCartCustomEvent<{
    cancel: boolean
    msg: string
  }>) => void;
        "onPaycargoPaymentSuccess"?: (event: PaycargoCartCustomEvent<{
    success: boolean
    data: any
  }>) => void;
        /**
          * Options
         */
        "options"?: string;
        /**
          * PcData
         */
        "pcData"?: TransactionInterface | string;
        "visible"?: boolean;
    }
    interface PaycargoLogin {
        "brand"?: string;
        "onPaycargoLogin"?: (event: PaycargoLoginCustomEvent<{
    success: boolean
    data: { idToken: string }
  }>) => void;
        "options"?: string;
        "redirectBackUrl"?: string;
        "type"?: string;
    }
    interface IntrinsicElements {
        "loading-spinner": LoadingSpinner;
        "notification-message": NotificationMessage;
        "paycargo-batch-cart": PaycargoBatchCart;
        "paycargo-cart": PaycargoCart;
        "paycargo-login": PaycargoLogin;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "loading-spinner": LocalJSX.LoadingSpinner & JSXBase.HTMLAttributes<HTMLLoadingSpinnerElement>;
            "notification-message": LocalJSX.NotificationMessage & JSXBase.HTMLAttributes<HTMLNotificationMessageElement>;
            "paycargo-batch-cart": LocalJSX.PaycargoBatchCart & JSXBase.HTMLAttributes<HTMLPaycargoBatchCartElement>;
            "paycargo-cart": LocalJSX.PaycargoCart & JSXBase.HTMLAttributes<HTMLPaycargoCartElement>;
            "paycargo-login": LocalJSX.PaycargoLogin & JSXBase.HTMLAttributes<HTMLPaycargoLoginElement>;
        }
    }
}
